https://refactoring.guru/design-patterns/builder
https://www.youtube.com/watch?v=tv-_1er1mWI

Creational 
	How objects are created
Structural 
	how they are related
Behavioural 
	how objects communicate with each other
-----------------
singleton creational -> create only one instance of a class (use in the server) ( create lock if using multithreading)
				Use the Singleton pattern when a class in your program should have just a single instance available to all clients; for example, a single database object shared by different parts of the program.

				safe multithread creatiion: https://refactoring.guru/design-patterns/singleton/java/example
builder creational -> use this to create the user (database, server, possible GUI)

factory -> 

facade -> hide the actual implementation to make it easier to the user

proxy -> use gets and sets to change the msg data, user server to proxy to database

iterator -> iterate object 

observer -> one to many relationship, use in server. Automatlicly update with the latest data. (subscription)

mediator -> many to many relationship, controller to provide coordination (server)

		https://www.tutorialspoint.com/design_pattern/mediator_pattern.htm

state -> use for coordinator, change state of the user


https://learningdaily.dev/the-7-most-important-software-design-patterns-d60e546afb0e

Observer
    Coordinator -> notify others when someone leaves